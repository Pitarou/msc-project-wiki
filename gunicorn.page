---
format: markdown
categories: technical-notes
...
# Installing and launching gunicorn

    $ workon sasanqua
    $ pip install gunicorn
    $ cdproject
    $ vim sasanqua/sasanqua/settings.py # add 'gunicorn' to INSTALLED_APPS
    $ sasanqua/manage.py run_gunicorn

Yes. It's really that simple!  It listens to socket 8000,
just like the default server does.

**BUT** according to the [Django docs][django docs note about using wsgi to run gunicorn]:

> If you are using Django 1.4 or newer,
> itâ€™s highly recommended to simply run your application
> with the WSGI interface using the `gunicorn` command as described above.

[django docs note about using wsgi to run gunicorn]: https://docs.djangoproject.com/en/1.6/howto/deployment/wsgi/gunicorn/

So we do it this way instead:

    $ cdproject
    $ cd sasanqua
    $ gunicorn sasanqua.wsgi:application

We need to move to the same directory where manage.py is installed,
so that the relevant files are visible in python's module load path.

The specification `sasanqua.wsgi:application` is kind of like
`from sasanqua.wsgi import application`.
The function `application` accepts HTTP requests, packaged in a certain way,
and returns HTTP responses.

For configuration, we just pass it a `--configuation /path/to/configuation/file.py` argument.
The options are documented at [http://docs.gunicorn.org/en/18.0/configure.html]().

# Important options

## pidfile

(or `--pid /path/to/pid/file` at the command line)

This is the location of a file where gunicorn will write the process ID
of the. It deletes this file when it closes. So you can send it signals like:

    kill -HUP `cat /path/to/pid/file`

to tell gunicorn to restart itself.

By the way, I've wrapped all of this in a bash script at
`/Users/peter/Python/Projects/sasanqua/gunicorn`
so you can do stuff like:

    $ cdproject
    $ ./gunicorn # list the options
    $ ./gunicorn start
    $ ./gunicorn restart
    $ ./gunicorn stop

## bind

The socket to listen on.
E.g. `bind = 'http://127.0.0.1:8000'`,
or `bind = 'unix://path/to/socket.sock'` for a UNIX socket.

In the latter case,
another webserver will be reverse proxying to this socket.

# nginx

From the docs:

> It is best to use Gunicorn behind HTTP proxy server.
> We strongly advise you to use [nginx](Installing and configuring nginx).

Once I got nginx working, it was a relatively straightforward matter
to get it talking to Gunicorn on the backend.
nginx serves the static files directly, and gunicorn serves
the pages that django creates dynamically. The `collectstatic` command
works flawlessly.

And it worked well using unix sockets, too.

# server permissions

Launching `gunicorn` as the [newly created `gunicorn` user](creating new users)
triggers lots of errors. I had to set the appropriate permissions on various files
and directories. Strangely, `_gunicorn` couldn't access the sqlite database even
when I opened up all the permissions on `sasanqua/sqlite3`.
I guess sqlite must use a permissions management system of its own.
I ended up having to wipe the database and start over.

But with that taken care of, stuff worked.