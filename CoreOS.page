---
format: markdown
categories: technical-notes
...
# Background

[CoreOS](https://coreos.com/) is a lightweight Linux distro
designed for networked applications.
One of its features is that it is designed to be as lightweight as possible,
with most of the functionality packaged in [i]Docker[/i] containers.

[Docker](https://www.docker.io/) is a Linux-based technology
that allows an application to be packaged
along with its supporting software stack in a [i]container[/i].
Multiple containers can be deployed on the same OS. They live in separate
namespaces, and share only the kernel.

[Vagrant](http://www.vagrantup.com) is a system for managing OS deployments.
By default, it uses [VirtualBox](https://www.virtualbox.org/) OS virtualization,
but it can just as easily install OSs on remote systems.
The CoreOS team have published a `Vagrantfile` to help users get started:
[CoreOS Vagrant](https://github.com/coreos/coreos-vagrant).

Neither CoreOS nor Docker are officially in Version 1 yet,
but they are already being embraced enthusiastically by developers.

# Installing and SSHing into CoreOS

1. Install VirtualBox.

I can't remember exactly how I did this, because it was some time ago,
but I configured VirtualBox to look for VM images at
`~/VirtualBox VMs`.

2. Install Vagrant.

3. Grab the `CoreOS Vagrant` repository.

    git clone https://github.com/coreos-vagrant/
    cd coreos-vagrant

4. Start the Virtual Machine

    vagrant up

Vagrant will download the CoreOS image if you don't have it already.

Examining `Vagrantfile` reveals this line:

    (1..$num_instances).each do |i|

        #...

        ip = "172.17.8.#{i+100}"
        config.vm.network :private_network, ip: ip

We only have one instance, so this tells us that our VM is accessible
through a [private network](http://docs.vagrantup.com/v2/networking/private_network.html)
at `172.17.8.101`.

5. SSH into the Virtual Machine

    vagrant ssh

# Installing an Apache container

This all happens from within CoreOS.

    docker run ubuntu /bin/echo hello world
 
This installs the ubuntu image, if we don't have it yet,
outputs a friendly message, and halts.

Run `docker images` and you should see the ubuntu image
that we downloaded. Run `docker ps -a` and you should see
the modified image that was created by running `/bin/echo hello world`.
(Don't worry, it's not a copy of the whole OS -- it's just the diff.)

Lets run an interactive session:

    docker run --tty --interactive ubuntu /bin/bash

The `--tty` (`-t`) flag allocates a pseudo-tty (whatever that means)
and the `--interactive` (`-i`) flag keeps stdin open.
Now, from the shell, we can install apache:

    apt-get install apache2
    exit

Run `docker ps -a` again and you should see another image.
It will have a hex ID, and a randomly generated name like
`cocky_engelbart`. You can use these interchangeably, and
you only need to type as much of the name as is needed to
avoid ambiguity.

Lets commit this new apache image with:

    docker commit name_or_id_of_image coreos/apache

Now it should be at the top of the list when you type
`coreos images`.

Finally, we want to run apache and expose port 80:

    docker run --detach --publish 80:80 coreos/apache /usr/sbin/apachectl -D FOREGROUND

Here, the `--detach` (`-d`) option tells docker
to run the container in the background.

The `--publish` (`-p`) option tells docker to map the
container's port 80 to the host's port 80.
(Remember, the host is still embedded in a VirtualBox VM.)

`-D FOREGROUND` tells apache to run in the foreground,
because the container stops when the foreground process stops.

And that's all we need. You should get the default apache page
at <http://172.17.8.101/>.