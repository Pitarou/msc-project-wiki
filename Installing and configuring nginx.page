---
format: markdown
categories: technical-notes
...
# Installing and launching

    $ brew install nginx

Read the caveats.

    $ nginx
    $ open http://localhost:8080

And up pops the 'Welcome to nginx!' page.

Easy!  Thanks, Homebrew people.  :-D

However, I did get a few caveats...

# Caveats (notes that appeared when I installed)

  * Docroot is: `/usr/local/var/www`

  * The default port has been set in `/usr/local/etc/nginx/nginx.conf` to 8080 so that nginx can run without sudo.

  * To have launchd start nginx at login:

         ln -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgents

    Then to load nginx now:

         launchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist

    Or, if you don't want/need launchctl, you can just run:

        nginx

# Default `nginx.conf`

All the commented out lines are removed:
    
~~~
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server {
        listen       8080;
        server_name  localhost;
        location / {
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
~~~

Now, here's the thing: where is the docroot set?

The 'Welcome to nginx!' homepage is served from `/usr/local/var/www/index.html`
(to be sure, I tried renaming the file and reloading in the web browser)
but the configuration file references `index.html`.
I tried `env | grep www` and it didn't turn up there.

# Reverse proxying

This is what I installed nginx for:
because it's the recommended webserver for Django apps
(along with [gunicorn]()).

So what do I need to get it working?

Here's the "just to get you started" example in the
[gunicorn docs](http://gunicorn.org/index.html#deployment):

    server {
      listen 80;
      server_name example.org;
      access_log  /var/log/nginx/example.log;

      location / {
          proxy_pass http://127.0.0.1:8000;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      }
    }

Here's a much more involved example, from
[gunicorn's fuller docs](http://docs.gunicorn.org/en/latest/deploy.html):

    worker_processes 1;
    
    user nobody nogroup;
    pid /tmp/nginx.pid;
    error_log /tmp/nginx.error.log;
    
    events {
        worker_connections 1024;
        accept_mutex off;
    }
    
    http {
        include mime.types;
        default_type application/octet-stream;
        access_log /tmp/nginx.access.log combined;
        sendfile on;
    
        upstream app_server {
            server unix:/tmp/gunicorn.sock fail_timeout=0;
            # For a TCP configuration:
            # server 192.168.0.7:8000 fail_timeout=0;
        }
    
        server {
            listen 80 default;
            client_max_body_size 4G;
            server_name _;
    
            keepalive_timeout 5;
    
            # path for static files
            root /path/to/app/current/public;
    
            location / {
                # checks for static file, if not found proxy to app
                try_files $uri @proxy_to_app;
            }
    
            location @proxy_to_app {
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_redirect off;
    
                proxy_pass   http://app_server;
            }
    
            error_page 500 502 503 504 /500.html;
            location = /500.html {
                root /path/to/app/current/public;
            }
        }
    }

And here's an even fuller one, referenced from the gunicorn docs,
hosted at [github](https://github.com/benoitc/gunicorn/blob/master/examples/nginx.conf):

    # This is example contains the bare minimum to get nginx going with
    # Gunicornservers.
    
    worker_processes 1;
    
    # # drop privileges, root is needed on most systems for binding to port 80
    # # (or anything < 1024).  Capability-based security may be available for
    # # your system and worth checking out so you won't need to be root to
    # # start nginx to bind on 80
    user nobody nogroup; # for systems with a "nogroup"
    # user nobody nobody; # for systems with "nobody" as a group instead
    
    # Feel free to change all paths to suite your needs here, of course
    pid /tmp/nginx.pid;
    error_log /tmp/nginx.error.log;
    
    events {
      worker_connections 1024; # increase if you have lots of clients
      accept_mutex off; # "on" if nginx worker_processes > 1
      # use epoll; # enable for Linux 2.6+
      # use kqueue; # enable for FreeBSD, OSX
    }
    
    http {
      # nginx will find this file in the config directory set at nginx build time
      include mime.types;
    
      # fallback in case we can't determine a type
      default_type application/octet-stream;
    
      # click tracking!
      access_log /tmp/nginx.access.log combined;
    
      # you generally want to serve static files with nginx since neither
      # Unicorn nor Rainbows! is optimized for it at the moment
      sendfile on;
    
      tcp_nopush on; # off may be better for *some* Comet/long-poll stuff
      tcp_nodelay off; # on may be better for some Comet/long-poll stuff
    
      # we haven't checked to see if Rack::Deflate on the app server is
      # faster or not than doing compression via nginx.  It's easier
      # to configure it all in one place here for static files and also
      # to disable gzip for clients who don't get gzip/deflate right.
      # There are other other gzip settings that may be needed used to deal with
      # bad clients out there, see http://wiki.nginx.org/NginxHttpGzipModule
      gzip on;
      gzip_http_version 1.0;
      gzip_proxied any;
      gzip_min_length 500;
      gzip_disable "MSIE [1-6]\.";
      gzip_types text/plain text/html text/xml text/css
                 text/comma-separated-values
                 text/javascript application/x-javascript
                 application/atom+xml;
    
      # this can be any application server, not just Unicorn/Rainbows!
      upstream app_server {
        # fail_timeout=0 means we always retry an upstream even if it failed
        # to return a good HTTP response (in case the Unicorn master nukes a
        # single worker for timing out).
    
        # for UNIX domain socket setups:
        server unix:/tmp/gunicorn.sock fail_timeout=0;
    
        # for TCP setups, point these to your backend servers
        # server 192.168.0.7:8080 fail_timeout=0;
        # server 192.168.0.8:8080 fail_timeout=0;
        # server 192.168.0.9:8080 fail_timeout=0;
      }
    
      server {
        # listen 80 default deferred; # for Linux
        # listen 80 default accept_filter=httpready; # for FreeBSD
        listen 80 default;
    
        client_max_body_size 4G;
        server_name _;
    
        # ~2 seconds is often enough for most folks to parse HTML/CSS and
        # retrieve needed images/icons/frames, connections are cheap in
        # nginx so increasing this is generally safe...
        keepalive_timeout 5;
    
        # path for static files
        root /path/to/app/current/public;
    
        location / {
          # an HTTP header important enough to have its own Wikipedia entry:
          #   http://en.wikipedia.org/wiki/X-Forwarded-For
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    
          # enable this if and only if you use HTTPS, this helps Rack
          # set the proper protocol for doing redirects:
          # proxy_set_header X-Forwarded-Proto https;
    
          # pass the Host: header from the client right along so redirects
          # can be set properly within the Rack application
          proxy_set_header Host $http_host;
    
          # we don't want nginx trying to do something clever with
          # redirects, we set the Host: header above already.
          proxy_redirect off;
    
          # set "proxy_buffering off" *only* for Rainbows! when doing
          # Comet/long-poll stuff.  It's also safe to set if you're
          # using only serving fast clients with Unicorn + nginx.
          # Otherwise you _want_ nginx to buffer responses to slow
          # clients, really.
          # proxy_buffering off;
    
          # Try to serve static files from nginx, no point in making an
          # *application* server like Unicorn/Rainbows! serve static files.
          proxy_pass http://app_server;
    
        }
    
        # Error pages
        error_page 500 502 503 504 /500.html;
        location = /500.html {
          root /path/to/app/current/public;
        }
      }
    }

Food for thought....

# Current configuration

So now I have an `nginx.conf` installed at the default location
(`/usr/local/etc/nginx/nginx.conf`) which sets up a few basic things,
as laid out in the length example configuration file above,
and then includes configuration files for:

a Django project using gunicorn
:   configuration in the project's `nginx_conf` directory
this wiki
:   `~/.nginx/gitit.conf`
some php projects
:   `~/.nginx/php.conf`

    These all use `php-fpm`, so they all include
    `~/.nginx/php-fpm.conf`

Everything is listening on port 8080.
Now I've eliminated the need for Apache, the next step is to
remove Apache and switch these to port 80.