---
format: markdown
categories: technical-notes
...
References:

 * [PostgreSQL 9.3.1 Documentation: Chapter 17. Server Setup and Operation](http://www.postgresql.org/docs/9.3/interactive/runtime.html)
 * [Damons and Services Programming Guide: Creating Launch Daemons and Agents](https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchJobs.html)


It seems that Django, Heroku and postgresql are a good combination,
so I need to install postresql on my system.

Install the package
-------------------

Used homebrew to get it:

    homebrew install postgresql

Users and security
------------------

The default installation runs as the user who ran homebrew.
Since, at some point, I want to make this run on an exposed server,
I need to get the security procedures nailed down.
So lets do this in the secure way, as recommended in the docs.

Running `dscl . list /Users` shows that there is already a user called `_postgres`.
So this is the user that the *postgres* process will run as.

Initialise the db
-----------------

Judging from the launch daemon configuration (more on that later)
the default location for the db is `/usr/local/var/postgres/`.
So we need to make the `postgres` directory, make `_postgres` the owner,
and then initialise the db there:

    $ cd /usr/local/var
    $ sudo mkdir postgres
    $ sudo chown _postgres postgres
    $ sudo -u _postgres initdb -D postgres


Make it automatically start on boot
-----------------------------------

The homebrew installation helpfully provides a Launch Agent configuration file,
and recommend that I symlink it into my `~/Library/LaunchAgents` directory.
But that only works if the db runs in my user account.
I want it to run as user `_postgres`.
The way to achieve this is to add it to the `root` Launch ~~Agents~~ Daemons,
with an extra `UserName` parameter.

    $ cd /Library/LaunchAgents
    $ sudo cp /usr/local/opt/postgresql/homebrew.mxcl.postgresql.plist local.postgresql.plist
    $ sudo vim local.postgresql.plist
    $ cat local.postgresql.plist
~~~ {.xml}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>KeepAlive</key>
  <true/>
  <key>Label</key>
  <string>local.postgresql</string>
  <key>ProgramArguments</key>
  <array>
    <string>/usr/local/opt/postgresql/bin/postgres</string>
    <string>-D</string>
    <string>/usr/local/var/postgres</string>
    <string>-r</string>
    <string>/usr/local/var/postgres/server.log</string>
  </array>
  <key>RunAtLoad</key>
  <true/>
  <key>WorkingDirectory</key>
  <string>/usr/local</string>
  <key>StandardErrorPath</key>
  <string>/usr/local/var/postgres/server.log</string>
  <key>UserName</key>
  <string>_postgres</string>
</dict>
</plist>
~~~

When I ran `vim` above, I added these lines:

~~~ {.xml}
<key>UserName</key>
<string>_postgres</string>
~~~

and I changed the `Label` property to match the name I've given to this plist.

Now we can kick things off with:

    $ launchtl launch local.postgresql.plist

But ... this doesn't work. :( Still it **does** work when I reboot. :)
In any case, here's how to do it the old-fashioned way:

    postgres -D /usr/local/var/postgres -r /usr/local/var/postgres/server.log

Now I can make myself a power user:

    sudo -u _postgres createuser --superuser --createdb --createrole --inherit --login --echo peter

(N.B. if the database was created by `peter` there would already be a user going by that name.)

This creates a user called peter with full privileges. It also echoes the command it sent to the database, which is:

    CREATE ROLE peter SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;

Now I can create a database and connect to it. Here's a sample session:

    $ createdb testdb
    $ psql testdb
    psql (9.3.1)
    Type "help" for help.

    testdb=# help
    You are using psql, the command-line interface to PostgreSQL.
    Type:  \copyright for distribution terms
           \h for help with SQL commands
           \? for help with psql commands
           \g or terminate with semicolon to execute query
           \q to quit
    testdb=# SELECT current_date;
        date
    ------------
     2002-08-31
    (1 row)
    testdb=# \q
    $ dropdb testdb

------

But there still seems to be a problem with the users when I reboot. I'll look into it later.