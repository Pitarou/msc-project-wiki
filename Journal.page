% Journal
% 
% 

[Journal 2013-05]()

2013-06-02
==========

Project Proposal
----------------

It’s done. I’ve submitted it. [I also posted it to the forum.](http://www.studynet2.herts.ac.uk/ptl/Students375.nsf/Files/676473C158F5AED480257B7E001934FA/$FILE/PP_McarthurPeter.pdf) As one
might expect, the process of filling in the gaps (in particular, finding
appropriate citations) forced me to go and actually look at the
literature, and I learned a lot from the process.

This journal
------------

I’ve just finished porting this journal to Emacs org-mode. One
especially nice feature of org-mode is that I can integrate to-do lists
into my journal.

Here is my sysadmin todo list:

>     DONE find a way to keep the journal in sync between the various devices I use
>     CLOSED: 2013-06-03 Mon 19:02
>     DropBox. 
>     DONE automatic backups (because I'm lazy)
>     CLOSED: 2013-06-03 Mon 19:02
>     DropBox. 
>     DONE journal version control and timestamping
>     CLOSED: 2012-07-14 Sat 01:11
>     Moved over to gitit, which integrates git.  Now I just have to put it on
>     my github account.

Timestamping commits
--------------------

Someone else has been thinking about this problem, and has found a
solution. GitHub already adds cryptographic fingerprints to maintain
archive integrity. So all I need to do is submit those fingerprints for
timestamping.

ouDetailed instructions on StackOverflow: [How can I use RFC3161
(trusted) timestamps to prove the age of commits in my Git
repository?](http://stackoverflow.com/questions/11913228/how-can-i-use-rfc3161-trusted-timestamps-to-prove-the-age-of-commits-in-my-git)

(In principle, it’s possible to add these timestamps to your Git
repository with [Git notes](http://git-scm.com/2010/08/25/notes.html).)

This is overkill. Nobody’s going to question GitHub’s timestamps, and
for the journal, I just need to zip it, timestamp the archive, and send
it to dropbox.

2013-06-03
==========

Playing with tech: why doesn’t bibtex work for org-mode?
--------------------------------------------------------

I’ve spent far longer than is sensible trying to “optimise my tools for
my productivity workflow”. (I.e. playing with emacs, org-mode, and
LaTeX.)

Well, you never know, it might even pay off. Some people have even
written entire theses in org-mode. At some point, I’m going to move all
my reading notes into a separate file (or would it make more sense to
use org tags?), but for now I’ll just keep throwing them into this
journal.

Right now, I’m trying to figure out why reftex can see my .bib files,
but the pdf compiler (MikTeX, presumably?) can’t. Browsing the help
forums tells me that adding bibtex to my compiler toolchain by
configuring the variable org-latex-to-pdf-process or
org-latex-pdf-process (depending on which source you consult) should do
the trick, but I haven’t found any magical incantation that’s worked
yet.

I did find this at
[orgmode.org/worg/org-tutorials/org-latex-export.html](http://orgmode.org/worg/org-tutorials/org-latex-export.html):

> Note that makeindex and bibtex require a bit more effort to work in
> this way because of path name issues. Nick Dokos suggested this fix,
> which specifies a path to one or more BibTeX .bib files:
>
> >     #+begin_src sh :exports none
> >     BIBINPUTS=/path/to/bib/:$BIBINPUTS
> >     export BIBINPUTS
> >     #+end_src
>
> If you have system-wide bibliography and index files, then it might
> be useful to modify BIBINPUTS in .profile or similar. The code
> example above uses Babel to set the variable on a per-file basis.

[Babel](http://orgmode.org/worg/org-contrib/babel/intro.html) is a special mode that allows you to execute snippets of code
from within the file (and do things with the stdout output, but the
point here is that an environment variable is being exported).

I think I understand what I have to do, but I’m too tired to start it
now.

2013-06-05
==========

Burnout: taking things easy
---------------------------

I’m starting to burn out. This should come as no surprise, given how
busy I’ve been. Unfortunately, I still have a busy week ahead, so I’m
going to have to limit myself to only urgent matters for a few days,
while I give myself a chance to recover.

For instance, I haven’t written notes on any of the papers I’ve read
recently. Those notes are just going to have to wait until I’m feeling
stronger.

And, given the deadline looming at the end of this month, I’m going to
have to devote most of my available energy to my other project. So this
project is going to be pretty quiet for a few weeks.

2013-06-07
==========

Meeting Tim Hunt
----------------

I’ve e-mailed Tim Hunt directly, and he has kindly agreed to meet me in
Milton Keynes on the 29th of July. I promised to take him out for a
curry.

2013-06-08
==========

Contact with supervisor
-----------------------

Maria Schilstra has allocated me a supervisor, so I e-mailed him:

> Dear Jay,
>
> You’ve been allocated to supervise me for my MSc Project, so I’m
> writing to kick things off. I’ll tell you about me, tell you about my
> project proposal, and discuss how we might work together in future.
>
> My name’s Peter McArthur. I’m British, but I’ve lived in Japan for
> about 3 years. I am a teacher of English as a Foreign Language. My
> course title is e-Learning Technology. I’m planning to build a module
> for a Virtual Learning Environment that will allow students to submit
> their computer programming homework for automatic assessment with unit
> tests. I’d like to know how your expertise can help me and, if
> possible, I’d like to meet you face to face when I visit the UK in
> July/August.
>
> **Summary of Project Proposal**
>
> *Development of Computer Programming Proficiency Assessment Tools for
> a Virtual Learning Environment*
>
> I will design, implement and evaluate a programming question type for
> Moodle.
>
> A Virtual Learning Environment (VLE) is an internet content management
> system for a school or university. Herts Uni’s studynet is an example.
> Many VLEs include facilities for taking tests and exams online.
>
> Moodle ([moodle.org](http://moodle.org)) is a popular, open source VLE. Moodle’s quiz
> module allows tutors to compose automatically marked quizzes. Question
> types are implemented as modules that conform to an API defined in the
> quiz module. With a little glue logic, it is even possible to include
> questions hosted on other systems.
>
> Computer science teachers have been using automated unit tests to
> assist in the grading of programming assignments since the 1960s. I
> will implement such a unit testing system as a Moodle question type.
>
> See attachment for the rest.
>
> **More about me**
>
> I’ve always considered myself a computer nerd, and I studied a little
> Maths and Computer Science at university. My health was poor in those
> days, so I wasn’t much of a student and there are gaps in my
> knowledge, but I’ve retained my geeky interests. I’m confident of my
> skill as a programmer.
>
> Because life is complicated, I’ve ended up teaching English in Japan.
> It’s an okay job, but not an attractive career. I chose this course in
> e-Learning Technology as a stepping stone to an IT career.
>
> **More about the project**
>
> It’s important to me that my project should be of more than just
> academic interest. I want to build something I can gain recognition
> for. This is why I chose to work on a widely-used, open source
> project.
>
> I’ve already made contact with the community of Moodle developers. I’m
> very pleased that Tim Hunt has taken an interest in my idea. TIm Hunt
> works on Moodle for the Open University, and he did most of the work
> on the current version of Moodle’s question module.
>
> Schedule
>
> I’m a part time student, so my final submission deadline is in
> January.
>
> My schedule approximately as follows:
>
> **June:** Busy with other matters.
>
> **July:** Literature review. Write extended project proposal.
>
> **August:** Visit the UK. Implementation.
>
> **September:** Implementation and documentation.
>
> **October:** Documentation and evaluation.
>
> **November:** Write report.
>
> **December:** Overrun.
>
> Staying in touch and monitoring
>
> **Timezone:** GMT+9 (8 hours ahead of the UK in summer)
>
> **E-mail and Google Hangouts:** peter.mcarthur@gmail.com
>
> **Skype:** Pitarou
>
> **Telephone:** +81 70 5023 8447 (Mobile phone number in Japan)
>
> **Address:** Peter McArthur 2-21-1-4-402 Hashikadai Narita Chiba JAPAN
> 286-0037 (postcode)
>
> I’m keeping a project journal. I’ll send you a link shortly so you can
> keep track of my rambling musings.
>
> Questions
>
> Who are you, and what do you do?
>
> What are areas of expertise? Do they relate to what I’ll be doing?
>
> How much time do you expect to spend supervising me?
>
> How do you want to keep in touch?
>
> **Meeting face to face**
>
> I’m going to be in the UK from 26th July to 25th August. I’ve already
> arranged to meet Tim Hunt, the Moodle Developer at Open University, in
> Milton Keynes on 29th July. I’ve also made vague plans to meet Andrew
> Pyper, the tutor for the Principles and Practices of e-Learning Design
> and Development module, in Hatfield. If possible, I’d also like to
> meet you at some point. Would sometime at the end of July suit you?
>
> Warm regards,
>
> Peter McArthur

He sent me three replies in quick succession. He told me a lot about
himself, and his background. I’d expected him to be a young post-doc, or
similar, so I was quite suprised to learn that he was a retired
professor (and a good deal else besides).

The main thrust of his advice was: KEEP THINGS SIMPLE. This reflects my
worries about this project, but it’s good to be reminded. *Vigilance is
the eternal price of simplicity. as Abe Lincoln might have said if he’d
ghost-written for Douglas Cockburn.*

I wrote to him again:

> Dear Jay,
>
> This is a pleasant surprise! I was expecting to be supervised by a
> young PhD student, so you can image how pleased I was when I learnt
> how experienced you are.
>
> I take all your warnings and advice about managing the complexity of
> this project very seriously. In fact, if you do one thing for me as
> supervisor, PLEASE KEEP TELLING ME TO KEEP IT SIMPLE, because
> premature complexity is the greatest risk for this project. I have a
> very bad habit of trying to add too many features at too early a
> stage.
>
> I was also hoping you could clarify something. You mentioned metrics a
> couple of times. Here:
>
> \> That way, you have greater chance of success, and the work is
> analysable with statistical metrics as well as demonstrable.
>
> and here
>
> \> show the old runs, and the new runs with the improvements in place.
> Do an overall assessment plotting graphs and charts.
>
> What is it that you’re expecting me to measure?
>
> Regards,
>
> Peter

He told me to come up with my own metrics. He also said:

> My message is keeping the project focus narrow, simple and focused
> without trying to develop all features. I am often weary of improving
> aspects any open system that is available, as it is an intensive work

Amen to that.

2013-07-13
==========

Long absence
------------

It’s been a long time since I did anything useful on this project. In
the end, I paid a heavy toll for my burnout: I had to take a couple of
days off work, and I haven’t been able to get back into my study
routines again for a long time.

Proposal feedback
-----------------

Remarkably little has happened on the course. I received the following
feedback on my project proposal:

> Interesting project proposal, and the investigations suggests cover a
> number of tasks. The awareness of the system is highly appreciated. It
> should be possible to carve out a subset of the tasks set suggested so
> that the focus is sharp and the complexity is less. Good overall
> effort.

Meeting
-------

An on-line Skype meeting with my supervisor, and his other two supervisees, is scheduled for Saturday.

More tech
---------

I’ve bought a new computer for doing my project. It’s a sleek and shiny
MacBook Air -- heavenly!

After a lot of experimentation, I think I've come up with a way to keep my
notes that I'm reasonably happy with.  I'm using a wiki platform called _gitit_.  I like it because:

 * It's Haskell. I still love Haskell, even though I haven't used it in years.

 * It's built around PanDoc, so I can freely mix, match and convert document formats in
   whatever way suits me.

 * It's also built around Git, so all I have to do is put it on Github and my verifiable
   history problems are solved.

 * Although I'll miss the WYSIWYM goodness of LyX, in practice it does very little that I
   can't do just as well with Markdown.  And if I want to do anything fancy, it's easy enough
   to convert to LaTeX.

PanDoc also has an experimental BibTeX extension, so I'll see if I can integrate that.  If so, I might be able to do all of my work in this wiki.  It's a shame there isn't a *blog* extension.  If I have the time, I might be able to do something about that.

2013-07-14
==========

Citations in gitit
------------------

As far as I can tell, gitit already supports citations in principle.  It should be a straightforward matter, in principle, to add a link to the `.bib` file as metadata.  Unfortunately, it's not supported, but I still have access to the underlying PanDoc tools so I can probably come up with something.

Transfer to github
------------------

Excellent!  I now have this wiki synced to github. All I have to do is say the magic words:

    git push -u origin master

and the two are in sync.  I'm automating this with launchd.  [Keeping the gitit wikis on the mac and on github in sync]().

2013-07-15
==========

Converting from Pandoc to LaTeX
-------------------------------

I've experimented a little, and it kind of works, but there's still a lot I have to figure out:

 * The title, author, date Pandoc metadata is not being used.
 * The bibliography links aren't working (which is to be expected, because I haven't told it where to look for the .bibtex file)
 * Setting up the appropriate template

I reckon it's worth figuring out how to set up the appropriate toolchain,
because then I can potentially compose the whole document in this wiki.

2013-07-17
==========

Reading about Moodle architecture
---------------------------------

Read Tim Hunt's article about Moodle in *The Architecture of Open Source Applications*. ([Hunt2012b]())

Feel like I learnt a lot, although I now have a lot of questions about what has changed since the article was written.

Ethics approval
---------------

Received more e-mails reminding me that I need to get on with my ethics approval.
Need to take care of this soon.

Falling behind :-(
------------------

I've really fallen behind schedule.
I hoped to have much of my reading done by now,
but I feel like I've barely scratched the surface with my list of research questions.

2013-07-18
==========

Literature search
-----------------

Starting my literature review in earnest,
starting with the questions:

  * What pedagogical framework should guide my work?

and

  * What criteria and methods can we use to evaluate an assessment tool?

Tried google scholar with search terms like *virtual learning environment pedagogical framework*
and *learning object evaluation*.

I also e-mailed Andrew Pyper to ask if he has any suggestions.

Meeting people
--------------

At the same time as asking Andrew Pyper about pedagogical frameworks,
I suggested a social call on July 30th.
I also e-mailed Maria Schilstra with the same suggestion.

2013-07-20
==========

Skype meeting with supervisor
-----------------------------

Quite a frustrating meeting.  Lots of Skype technical problems and dropouts.
I also found Jay quite a difficult person to talk to.
I get the impression that he's been doing this for so long that,
when he's in advice giving mode,
he's not actually talking to me any more.

The main takeaway points were:

 * narrow down and refine my Extended Project Proposal as much as possible
 * divide the project into distinct stages, with an objective for each stage
 * don't get too wrapped up in the literature review
 * if at all possible, keep the project out of the ethics committee's hands

2013-07-22
==========

Moodle installation
-------------------

[Installing Moodle on my Mac]()

Successfully installed Moodle on my laptop without too many problems,
although there are still a few more configuration settings and modules I need to take care of.

In particular, Max OS X prefers `launchd` over `cron` jobs,
so I'll need to exercise my brain a little more to get that part of the system
up and running properly.

2013-07-23
==========

Meeting Dr Schilstra
--------------------

Dr Schilstra wrote a very pleasant reply in which she said she'd be happy to meet me.

The Conversational Framework
----------------------------

[The Conversational Framework](Britain2004#the-conversational-framework) appears to be
exactly the pedagogical framework I'm looking for.  Furthermore, the stuff about
reflection ties in neatly with the clever approach in
[Edwards, S.H., 2004. *Using software testing to move students from trial-and-error to reflection-in-action*](Edwards2004).

![Diagram of the Conversational Framework](/diagram of the conversational framework.png)

Just noticed: the diagram describing the teacher's internal states
reminds me an awful lot of the diagrams of what goes on
in an Intelligent Tutoring System.  Hmm.

**UPDATE**: [Laurillard2002]() says that [so far, ITSs have not lived up to the hype](#intelligent-tutoring-systems-and-the-conversational-framework).

2013-07-29
==========

[Meeting with Tim Hunt 2013-07-29]().

2013-07-30
==========

 *  [Meeting with Maria Schilstra 2013-07-30]()
 *  [Meeting with Andrew Pyper 2013-07-30]()

2013-07-30
==========

What a busy few days I've had!  Packing ... getting the hamster settled in somewhere ... flying to England ... Extended Project Proposal ... meeting people.  It's going to take me a few days to catch up on this journal.

I'll organise these entries chronologically later, but here's what's been going on lately:

Change of project emphasis
--------------------------

As I started working on my Extended Project Proposal,
it dawned on me that I had the wrong emphasis.
As I'd always feared, I'd become too interested in the technical aspects,
and ended up with a project proposal that was far more technically ambitious
than pedagogically ambitious. I e-mailed my supervisor, to let him now about the change of direction,
and he seemed supportive.

It wasn't easy to change direction so close to the deadline,
but I managed to produce a proposal I'm happy with just in time.

My core artefact is still the same: a minimal implementation of a Moodle plug-in
that uses unit tests to assess students' submitted code.
For simplicity's sake, the code will be browser-based Javascript.

But my advanced objectives are now very different.
My implementation will remain technically primitive, but I will pursue
different pedagogical tacks, such as:

 -  having students write their own unit tests,
    assessing the student's submission against those tests,
    and assessing the unit tests with an instrumented model answer.
    ([Edwards2003]())

 -  allowing students to share and review one another's code

 -  literate code

I also added expert evaluation as an advanced objective.
To be honest, I don't really know how I'd go about organising this,
but it sounds like a worthwhile exercise if I can pull it off.
(It's just occurred to me that it would raise awareness of my implementation
which could potentially, help me in my goal to raise my profile....)

It's also just occurred to me that I should have kept the REPL in my
project proposal. [It's pedagogically important.](Quotes about REPLs) But it would be important to
implement it in the way DrScheme implemented it: if the code is edited the REPL
stops receiving input until it's recompiled.

Extended Project Proposal
-------------------------

[Here it is.](Extended Project Proposal)  I submitted uncomfortably close to the deadline,
but with the amount of other stuff going on, frankly,
I'm surprised I was able to get it into a state I was reasonably happy with in time to submit.

On reflection, part of the problem is that it's difficult to write a detailed project plan
until I've completed my literature review.
The examiners can't be expecting miracles,
but I wish I'd had a little more guidance on how to calibration my expectations for myself.

Come to think of it, if things had gone according to plan a few weeks ago and I hadn't burnt out,
I would have already completed my literature review and I wouldn't have faced this quandary.

2013-08-02
==========

Thoughts on reading [Hollingsworth1960]()
-----------------------------------------

Great editorial quote:

> While there is a great deal of research being accomplished on
> "teaching machines", many computer educators have not realized
> that when teaching the use of the computer they have access to
> the finest "teaching machine" of all---the digital computer.  
> --- Alan J. Perlis

The simplicity of my system means it has rather a lot in common
with Hollingsworth's primitive (by contemporary standards)
"automatic grader". In particular, the lack of sandboxing
leads to the following disadavantages:

 *  Some kinds of errors (e.g. overflows) need manual intervention
 *  Limited to the native language of the runtime

(Webworkers can fix some of this.)

Other points they highlight that are still relevant:

 *  If the answers must be unit testable, there are some
    questions (perhaps the most interesting ones) that
    you can't ask

 *  The use of unit-testing over other methods of assessment
    allows different students in the class to work at different rates.
    They don't all need to be working on the same problems.


2013-08-09
==========

I'm finding it difficult to concentrate on the literature review,
and end up procrastinating by writing code instead.
I've decided to reschedule a little and start a prototype Javascript
front end implementation now.

2013-08-11
==========

Pedagogical ideas
-----------------

Getting back to the reading.  [Laurillard2002]() is a great book
for the pedagogical background theory I need.
It's also getting me thinking about the kinds of things I need
to make my implementation pedagogically useful.

I'm set in mind of my research into Intelligent Tutoring Systems:

 *  ITSs have models of the domain knowledge
 *  ITSs have a representation of how a student's knowledge
    maps to that domain
 *  ITSs give escalating hints when students make mistakes

Some kind of escalating hints system would be of value
in what I'm making.  E.g. a system where students
can save and load snippets of code, and they can "buy"
access to snippets that they can assemble into a solution.

Or ... and I really like this idea ...
they can be given access to some useful black box functions,
but they only get maximum marks if they don't use any of those black boxes.
(The black box functions are always available, but are instrumented,
so the unit tests can detect when they are being used.)

2013-08-17
==========

Reflections on reading
----------------------

Interesting stuff in [Stoodley2006]() and [Bruce2006]().
Very much in the "obvious when you think about it" category,
but it needs pointing out.

First, as I've been reading in other places,
there are deep learners and shallow learners.
This may be the simple explanation for the "Camel has two humps" problem.
Programming is inherently deep.  If you don't dive in deep,
you won't get anywhere.  (But why is this different from, say,
Maths or literature?  Maybe because, over the decades,
we've processed them into a form where even shallow learners can come away
with something.)

But [Stoodley2006]() and [Bruce2006]() take this in a rather
different direction.  They interview students to figure out
what they have in mind as they go about learning a programming language.
There are a huge array of mental horizons:

 *  some are just thinking about the institution, and getting the marks.
 *  some are thinking about just the language
 *  some want to get at the underlying concepts
 *  some want to get on and solve problems
 *  some want to learn about what it takes to become a professional programmer

At the post-graduate level, there were also students who were thinking
in terms of client satisfaction.

I think it's worth bearing this spectrum in mind as I formulate my criteria.

This reminds me of my conversation with Andrew Pyper, where he commented that,
given an on-line problem to solve, rather than attempting to solve it,
some students would repeatedly give the same wrong answer until eventually
the system stops giving hints and just tells them the right answer.
How can we persuade the shallow students
(the ones who just want to learn the syntax or just get through the course)
that they need to go a little deeper?

Anyway, getting back to the deep and shallow learners,
this time in Chapter 3 of [Laurillard2002](),
this also applies to learning activities.
Some will try to address the structure of the problem as a whole:

> In a study of how students carry out problem-solving (Laurillard, 1979),
> different approaches again distinguished those who addressed the structure as a whole:
>
> > First I had to decide on the criteria of how to approach it,
> > then drew a flow diagram, and checked through each stage.
> > You have to think about it and understand it first.
> > You have to make a basic assumption to work through,
> > then you work backwards to check your input, then forwards again.
>
> --- (Laurillard, 1979:399–400)
>
> and those who made no attempt to deal with the overall structure:
>
> > You don’t need to look at the system, you don’t have to interpret it.
> > I looked up the formulae and made the calculations from those.
>
> --- (Ibid. 399)

Later, there is a discussion of the option of choosing forms of representation
that make the relevant features salient.  This certainly helps shallow thinkers who,
almost by definition, only notice that which is salient, but we need to move them beyond this,
perhaps by requiring students to shift between multiple representations,
which include representations where it is less salient.

Perhaps that is a feature of deep thinkers?
Internally, they **search for** the representation that makes the correct representation salient.
That's why smart people can make difficult ideas seem easy:
they select the appropriate perspective.

Why is learning programming hard?  What can we do about it?
-----------------------------------------------------------

I think I'm onto something here
(although I doubt I'm the first one to have trod this path.)

Like I said earlier, I think the bimodal distribution for novice programmers
is the difference between deep thinkers and shallow thinkers.
But why is this effect so much stronger in programming than in other topics?

The answer, I suspect, is that in order to write even the canonical FizzBuzz program,
you first have to find a representation of the problem that makes the relevant features salient.
Even in simple problems, "plug the variables into the standard formula" just won't work.
Design Patterns notwithstanding, there is no standard model.
Every problem is unique, and requires the programmer to generate
a new perspective suited to that domain.

Refactoring, Design Patterns, and Domain Specific Languages
are all attempts to reify these perspectives, and to give programmers
a means to communicate them.  So perhaps that's the way forwards?
Perhaps we need to give students exercises in mapping between
the problem specification and these formalisms?

This sets me in mind of the writings at [Worry Dream](http://worrydream.org)
(if I've remembered the URL correctly -- I don't have internet access right now).
The author gives a sophisticated, interactive demonstration of the power of
being able to move between high and low levels of abstraction.
Also, I read a classic text about teaching Maths (can't remember the title)
before the Maths teaching gig I did a while bak, which talked about pretty much the same thing. 

Amber Smalltalk
---------------

I completely forgot about Smalltalk until I chanced upon this [Amber Smalltalk](http://amber-lang.net/) --
a browser-based Smalltalk implementation.

I've never spent much time with Smalltalk, but clearly it was a pedagogically important approach.
I don't have an internet connection right now, but if memory and the knowledge from my very
limited encounters with it serve, the Smalltalk model is to provide learners with a complete system,
which is designed to be extremely easy to inspect and modify at the source-code level.
Rather than breaking it down into little source-code files, learners simply save the entire
system image, so they are always working with and modifying a complete system.

I guess the pedagogical justification for this is similar to the justification for REPLs.

2013-08-19
==========

On the problem of getting students to take the right approach
-------------------------------------------------------------

> The findings on students’ epistemologies tell us
> that teaching should focus on the nature of the learning process,
> encouraging students to take a reflective, ￼interpretive approach to their learning.
> Marton and Booth describe several studies that attempted to do this,
> but all of which failed (Ibid. 168–171).
> They all share the technique of focusing the students’ awareness on the act of learning itself,
> e.g. by including in a text instructions on how to read it, to reflect on it, and to summarise it.
> In all cases, **the students responded by focusing on the guidance rather than the content of the text,
> thereby undermining any meaningful outcome** they might otherwise have derived.
> A learning skills programme for history students found a more successful strategy.
> It made use of history materials as the focus of reflection.
> This **integration of content with process resulted in a more advanced conception of learning**,
> compared with a similar programme that used generic materials.
> By contrast, the separation of content and process in the other studies
> had served merely to technify the learning process,
> making the instructions themselves the object of learning.
> Deriving teaching strategy from research findings is not straightforward.

--- Chapter 4 of [Laurillard2002](). [Emphasis mine]

But what does it mean????  How did they "integrate content with process"?


2013-08-21
==========

Intelligent Tutoring Systems and the Conversational Framework
-------------------------------------------------------------

Earlier, [I commented](#the-conversational-framework) on the similarity between the Conversational Framework
and the idealised structure of an Intelligent Tutoring System.
Here's what [Laurillard2002]() has to say on the matter:

> [Intelligent Tutoring Systems] promised to offer everything we could need
> to cover the full Conversational Framework, had they existed,
> but failed in practice
> because they were driven more by the cognitive science research agenda
> than by pedagogy.
> Sadly this trend continued
> and the current educational research agenda is not seeking to enhance the capability of adaptive programs
> with AI-based research.

Where am I at now?
------------------

I need to stop for a moment, and take stock of where I'm going.

My core idea was to implement a system that uses unit tests to assess code written by novice computer programmers.
This in itself is far from a new idea (in my review I've found an implementation from 1959!).
In my Initial Project Proposal, I proposed to carry this concept forward by implementing it for a Virtual Learning Environment,
and proposed all kinds of technical flourishes as Advanced Objectives.
For my Extended Project Proposal, I shifted the emphasis from the technical to the pedagogical:
I would implement a technically simple prototype, and use it as a platform to experiment with different pedagogical approaches.

My reading has lead me into questions like:

 *  what are the characteristics of effective university teaching?
 *  why do so many people do so badly on Computer Programming 101?
 *  what are the (mis-)conceptions held by novice programmers?
 *  what are the objects of focus and horizons of novice programmers?
 *  what pedagogically interesting features do other systems have?

This is all very well, but I'm at risk of losing focus on my the aims
I documented in my [Extended Project Proposal](), so now's a good time
to remind myself of them:

 *  [Literature review:](Extended Project Proposal#literature-review)
    1. What pedagogical framework should guide my work?
    2. What criteria and methods can I use to evaluate an assessment tool?
    3. What tools already exist? How well do they meet the needs and criteria I have identified? What can I learn from them?
 *  [Developing requirements:](Extended Project Proposal#developing-requirements)
    1. What are the goals of the system?
    2. What is the minimum that I must implement in order to achieve a usable prototype? These are my core requirements.
    3. What are the most desirable features that I can implement in the remaining time available? These are my advanced requirements.
    4. What are the properties of a pedagogically useful implementation? These are my evaluation criteria.

The pedagogical framework is clearly the Conversational Framework as described in [Laurillard2002]().
Before I read any further in that book, I need to skip ahead and see whether it has
everything I need to develop the framework into an evaluation instrument.

In terms of tools, I think I have a fair grasp.

The goals of the system are tenuous,
but I think I can pull something together if I look through my notes and
list everything I can think of.
From there, I can refine the list into something sensible.

2013-08-31
==========

I'm as busy as ever.  Stepped straight off the plane, and back to work,
so the jet-lag is killing me.

Extended Project Proposal feedback and balancing the pedagogical and technical
------------------------------------------------------------------------------

I got 75%.

I was quite disappointed, because the marking scheme I was shown before
was much less fine-grained than the marking scheme that was actually used.
So I was looking at a section of my EPP and thinking, "Will it get the mark
or not," and the answer was usually, "Yes, I think I will."
But it turns out that the marker was looking at it and thinking,
"How many marks out of 10 shall I give it?" and, of course, I didn't
always get the 10.

I wrote to Maria Schilstra and asked her for a re-mark, setting out my reasons why.
Basically, my complaints were:

 *  The marker hadn't recognised the difference between objectives and requirements.

 *  The marker was marking it as if it were a pure engineering project,
    rather than an e-Learning technology project.

Maria gave a very thoughtful and considered answer, which I really appreciated.
In summary:

 *  You should be happy.  75% is actually pretty good.
 *  You were too vague.  If the marker misunderstood something, that shows your writing
    wasn't clear.
 *  This is the Computer Science department.  You are overly focussed on pedagogy.

These were good points, and I withdrew my request for a re-mark.
But I think there is an issue about how to balance pedagogy and technical issues.
Coming up with a good set of pedagogical requirements is **hard**, and it's **important**.
I feel this should have received more recognition.

I put a message on the discussion forum about this last point.
Maria says she has some thoughts on the matter, but she thinks it's better to wait
for other students to have their say before she steps in.

Reviewing another's project
---------------------------

I performed a heuristic review on Roderick Vella Cesare's coursework.

In his work he has taken tools used to build
3D multiplayer on-line role playing games, and created a level in which
the challenge is to reproduce the steps of a sorting algorithm.

In terms of my own project, there were a few things I learnt from it:

 1. Try to give people as much support and structure as possible
    for performing Heuristic Reviews.

 2. Make sure you document your heuristics properly,
    with examples.

 3. If you don't think about pedagogy from the beginning,
    your product will really suck.

No disrespect to Roderick: he must have worked hard,
and he's built an impressive immersive environment,
but pedagogically it's lousy.

Thinking about implementation
-----------------------------

I've been learning about the YUI (Yahoo! User Interface) Library,
because that's the one that is bundled as standard with Moodle.
I was pleasantly surprised to find it includes excellent support for
customizable Widgets that can be stacked, embedded, and so on.

I've also looked into Ace Editor and, again, I was surprised to see just how good it was.
It's javascript module even spots common syntax errors and warns you about them.

In general, I'm thinking about building a lightweight beginner's IDE
embedded in the web page.  Each function is defined in a separate window.
And the function definition can include some boiler plate that's hard-coded in,
so the learner than just has to complete the necessary lines of code.

Things like undo and saving state can all be added later.

An interesting article
----------------------

Not really part of my research,
but I happened across this rather touching article about
self-directed learning of programming
with programmable Texas Instrument calculators.

<http://www.theatlantic.com/technology/archive/2013/08/go-ahead-mess-with-texas-instruments/278899/>

> After graduation, my interest in calculator games was supplanted by more collegiate pursuits. Truthfully, I'd almost entirely forgotten about my foray into programming until I discovered the "Calcusoft" storage bin in my parents' basement. In the years since, I'd become a high school English teacher and started a PhD in education. As such, even though paging through piles of code and illustrations was a pleasant nostalgia trip, I was most struck by the volume and depth of learning my TI-83 Plus had enabled.
> 
> If you had asked them, most of my high school teachers would have called me an unmotivated student or said that I lacked discipline and didn't take learning seriously. And yet, that abandoned storage bin told another story: with the aid of my calculator, I'd crafted narratives, drawn storyboards, visualized foreign and familiar environments and coded them into existence. I'd learned two programming languages and developed an online network of support from experienced programmers. I'd honed heuristics for research and discovered workarounds when I ran into obstacles. I'd found outlets to share my creations and used feedback from others to revise and refine my work. The TI-83 Plus had helped me cultivate many of the overt and discrete habits of mind necessary for autonomous, self-directed learning. And even more, it did this without resorting to grades, rewards, or other extrinsic motivators that schools often use to coerce student engagement.
>
> In light of this, I've now begun to see Texas Instruments graphing calculators as unique among educational technologies in that they enable learning that is couched in discovery more than formal teaching. Though they are still largely used as devices for computation, their programmability affords uses that exceed traditional calculators. These uses, in turn, can be marshaled in service of two very different yet interdependent aims of education -- convention and subversion.
>
> Convention trains students to know and navigate established rules of language, thought, and society. It joins students to a prescribed curriculum and instructs them to recall facts, contextualize information, memorize procedures, and solve equations. Historically, calculators have been used in schools to support this end. By allowing students to compute answers efficiently and accurately, calculators become an extension of a human capacity for calculation that dates back to the earliest forms of numeracy. It's why I had to purchase a TI-83 Plus years ago, and it's why calculators are still required in schools today.
>
> But in addition to its interest in convention, education is also deeply concerned with equipping students to question, challenge, and subvert these constraints when necessary. This "subversive" side of education is not a new idea: Plato's challenge to the sophists and Rousseau's encouragement of first-hand ideas offer two among many more historical examples. Subversion encourages students to take an imaginative stance toward learning, to embrace failure as an integral part of success, to see the world for what it is and consider what it might look like under a different set of conditions.
>
> It may be tempting to see convention and subversion as incompatible, but education thrives in the healthy tension between the two. Unfortunately, the latter resists the regimented curricula and bureaucratic order of schools, so there is rarely room for it in today's classrooms. That's why the TI-83 Plus and its progeny are so unique and significant.
>
> Texas Instruments unwittingly embedded a flexible programming environment into a ubiquitous technology accessible to (and even required of) most high school students. These devices not only fulfill their conventional role as tools for calculation but can also support more subversive uses. The TI-83 and its kindred are Trojan Horses, sneaking in subversive education under the auspices of convention.
>
> ...
>
> Texas Instruments graphing calculators offer a much-needed reminder of the tremendous educational potential that lies latent in our most common objects. Though many devices enter our classrooms for different reasons -- they are not neutral. Some are used to reinforce the authority of formal teaching; some engage students in the process of imaginative discovery. By balancing conventional and subversive academic possibilities, these latter objects show us the real potential of learning technologies. Not as sterile knowledge-delivery devices policed by authorized educators, but as boundary objects between endorsed educational utility and creative self-expression gone rogue.

Yet another document creation tool
----------------------------------

I'm going to try using Gingko for writing some of my reports,
and see if it's as helpful as it's creators claim.

<https://gingkoapp.com/#52211e017897d07c3f0017fc>

2013-09-03
==========

Schedule creep
--------------

As I slip more and more obviously behind schedule, I'm starting to get worried.

Of course, lots of things have interfered with my work, but that's hardly surprising.
My real mistake was trying to combine a life, work, and study.
Something had to give.

Literature review
-----------------

Paradoxically, I feel quite happy about how my literature review is going.
Yes, it's behind schedule, but as I pull all the reading together
some interesting themes and ideas are emerging.

The Gingko tool I mentioned earlier is proving to be very useful.
It's a bit strange that it uses Markdown
(don't they know Markdown is for geeks only?)
but that works well for me, because it means I can
paste everything I've written into this GitIt system.