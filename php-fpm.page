---
format: markdown
categories: technical-notes
...
See also [nginx](Installing and configuring nginx).

# Getting started with php-fpm

php-fpm is already installed on Mac OS X Mavericks,
but it is not configured.

When launched, it looks for a configuration file in
`private/etc/php-fpm.conf`, but that file is not installed.
But there is a heavily annotated `private/etc/php-fpm.conf.default`
to get me started.

The compiled-in default prefix for the configuration files and so on
is `/usr/var`, which isn't part of the default file tree for OS X.

I ended up tweaking the settings as follows:

  * save the pid at `/private/tmp/php-fpm.pid`
  * write to the error log at `/private/var/log/php-fpm.log`

That's enough to get it up and running.

# Launch on startup

Here's the plist file at `~/Library/LaunchAgents/local.php-fpm.plist`:

~~~ {.xml}
<?xml version="1.0" coding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>/local.php-fpm</string>
  <key>Program</key>
  <string>/usr/sbin/php-fpm</string>
  <key>RunAtLoad</key>
  <true/>
</dict>
</plist>
~~~

A problem has become apparent with one application.
I'm accessing php-fpm through an nginx proxy bound to
port 8080, but the links in the Moodle website mostly
look like this: `http://moodle.local/course/view.php?id=2`.
No 8080!

I was inclined to assume that the problem was somewhere in my
configuration, but grepping phpinfo() for '80' showed

    _SERVER["SERVER_PORT"]   8080

and so on, with no references to port 80.
And, since the whole purpose of this exercise was to migrate
from nginx to apache, I went ahead and migrated to port 80.

But there were still problems.  Full discussion at
[php-fpm headaches](Installing and configuring nginx#php-fpm-headaches).

Finally, I settled on using the firewall to forward port 127.0.0.2:80 to 127.0.0.1:8080,
and telling nginx to lie to fastcgi about the IP-address and port.
See [running on port 8080](http://gitit.local/Installing%20and%20configuring%20nginx#running-on-port-8080).

# Switching to UNIX sockets

This was a bit of a headache at first, until I realised I had to create a **directory**
with suitable access permissions, and then let php-fpm create the socket inode in that directory.
After I created the director `/var/php-fpm/` I just needed
`listen = /var/php-fpm/php5-fpm.sock` in the config file.

This seemed odd though.
Shouldn't it be possible to create just the socket with appropriate permissions?
But according to some guy on Stack Exchange:

> there is no command that creates a "hanging" socket.
> This is for historical reason: server's function bind(),
> the one that creates a socket name/inode in the filesystem,
> fails if the name is already used.
> In other words, server cannot operate on a pre-existing socket.

[serverfault: Create Unix Named Socket from the Command Line](http://serverfault.com/questions/358866)

# Creating a user

To see how another one is configured, look at user `_www`:

    $ dscl . read /Users/_www
    AppleMetaNodeLocation: /Local/Default
    GeneratedUID: FFFFEEEE-DDDD-CCCC-BBBB-AAAA00000046
    NFSHomeDirectory: /Library/WebServer
    Password: *
    PrimaryGroupID: 70
    RealName:
     World Wide Web Server
    RecordName: _www www
    RecordType: dsRecTypeStandard:Users
    UniqueID: 70
    UserShell: /usr/bin/false

Find a free ID:

    $ dscl . search /Users UniqueID 71
    _eppc    UniqueID = (
        71
    )
    $ # not that one ...
    $ dscl . search /Users UniqueID 72
    _ecvs    UniqueID = (
        72
    )
    $ # ... or that one ...
    $ dscl . search /Users UniqueID 80
    $ # that will do

What about the group ID?

    $ dscl . search /Users PrimaryGroupID 70
    _www    PrimaryGroupID = (
        70
    )
    $ # Hmm ... so they can share a group

So let's do it:

    $ sudo dscl . create /Users/_php-fpm
    $ sudo dscl . create /Users/_php-fpm UserShell /usr/bin/false
    $ sudo dscl . create /Users/_php-fpm RecordName _php-fpm php-fpm
    $ sudo dscl . create /Users/_php-fpm UniqueID 80
    $ sudo dscl . create /Users/_php-fpm PrimaryGroupID 70
    $ sudo dscl . create /Users/_php-fpm RealName "PHP server"
    $ sudo dscl . create /Users/_php-fpm RecordType dsRecTypeStandard:Users

And check what we've got:

    $ dscl . read /Users/_php-fpm
    dsAttrTypeNative:RecordType: dsRecTypeStandard:Users
    AppleMetaNodeLocation: /Local/Default
    AuthenticationAuthority: ;Kerberosv5;;_php-fpm@LKDC:SHA1.763FE0E648BC810DD5B00218DA1D813C6C00719D;LKDC:SHA1.763FE0E648BC810DD5B00218DA1D813C6C00719D ;ShadowHash;HASHLIST:<SALTED-SHA512-PBKDF2>
    GeneratedUID: D4A12178-BF8F-4698-BD57-09F8F5C7A208
    Password: ********
    PasswordPolicyOptions:
     <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
    	<key>failedLoginCount</key>
    	<integer>0</integer>
    	<key>failedLoginTimestamp</key>
    	<date>2001-01-01T00:00:00Z</date>
    	<key>lastLoginTimestamp</key>
    	<date>2001-01-01T00:00:00Z</date>
    	<key>passwordLastSetTime</key>
    	<date>2014-03-13T05:39:52Z</date>
    </dict>
    </plist>
    
    PrimaryGroupID: 70
    RealName:
     PHP server
    RecordName: _php-fpm php-fpm
    RecordType: dsRecTypeStandard:Users
    UniqueID: 80
    UserShell: /usr/bin/false

Which looks good, except for all that Authentication / Password stuff.
I'll look into that later.
