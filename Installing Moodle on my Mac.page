Sources
=======

Instructions from:

  * [Installing Moodle](http://docs.moodle.org/25/en/Installing_Moodle)
  * [Configuring PHP for Moodle](http://docs.moodle.org/25/en/PHP)
  * [Configuring MySQL for Moodle](http://docs.moodle.org/25/en/MySQL)
  * [Start an Apache Web Server in Mac OS X Mountain Lion](http://osxdaily.com/2012/09/02/start-apache-web-server-mac-os-x/)
  * [How to Enable PHP in Apache for Mac OS X Mountain Lion](http://osxdaily.com/2012/09/10/enable-php-apache-mac-os-x/)
  * [How to install MySQL on Mac OS X using Homebrew [Tutorial]](http://benjsicam.me/blog/how-to-install-mysql-on-mac-os-x-using-homebrew-tutorial/)
  * [Installing Apache, PHP, and MySQL on Mac OS X](http://jason.pureconcepts.net/2012/10/install-apache-php-mysql-mac-os-x/)
  * [Sequel Pro](http://www.sequelpro.com)
  * [phpMyAdmin Installation](http://docs.phpmyadmin.net/en/latest/setup.html)

Configuring Apache and PHP
==========================

Apache and PHP are already installed in OS X Snow Leopard.
The apache user is `_www` in the `staff` group.

I looked for the `php.ini` file with the command:

~~~ {.bash}
php -i | grep php.ini
~~~

which told me that it would be in `/etc`.
There wasn't a file at `/etc/php.ini`,
but there was a file at `/etc/php.ini.default`.

I checked that these default settings matched the requirements listed at
<http://docs.moodle.org/25/en/PHP>.  They do, but I'll have to be sure
to create a suitable `upload_tmp_dir` and give it the correct permissions
for the user `_www`. If I don't, I think it'll just send the files to
`$TMPDIR`.

The Mac OS X convention is to put user's websites in `~/Sites`,
so I created the directory `/Users/peter/Sites`.

I placed the following apache directive at
`/etc/apache2/users/peter.conf`:

~~~ {.xml}
<Directory "/Users/peter/Sites/">
    Options Indexes MultiViews
    AllowOverride AuthConfig Limit
    Order allow,deny
    Allow from all
</Directory>
~~~

(I'm not sure about whether the `AllowOverride` line is what I want.
Different HOWTOs give different settings, and I've no idea what it does.)

I uncommented the line

    LoadModule php5_module libexec/apache2/libphp5.so

in the file `/etc/apache2/httpd.conf`.

Then I created a file at
`/Users/peter/Sites/phpinfo.php`
with the immortal line:

~~~ {.php}
<?php phpinfo(); ?>
~~~

I launched apache with:

~~~ {.bash}
sudo apachectl start
~~~

I could then see the results of the `phpinfo` command
by pointing my web browser at <http://localhost/~peter/phpinfo.php>
and it worked.

I checked that the modules listed at
<http://docs.moodle.org/25/en/PHP>
were installed by using the command:

~~~ {.bash}
php -m | egrep -i 'iconv|mbstring|curl|openssl|tokenizer|xmlrpc|soap|ctype|zip|gd|simplexml|spl|pcre|dom|xml|intl|json|mysql'
~~~

All the required modules were present,
but the recommended module `intl` was missing.


The `intl` or [internationalization extension](http://www.php.net/manual/en/intro.intl.php) module
is a wrapper for the [ICU (International Components for Unicode) library](http://site.icu-project.org/),
which provides:

 -  conversions between unicode and pretty much any other code page
 -  localised string collation
 -  localised date, time, number and currency formatting
 -  localized time calculations
 -  unicode case folding, normalization, and so on
 -  unicode regular expressions
 -  bi-directional text handling
 -  word, sentence and paragraph boundary recognition

Instructions on how to install it at
<http://darraghenright.tumblr.com/post/22027208929/installing-intl-package-on-osx-lion>:

Use homebrew to install icu:

~~~ {.bash}
brew update
brew search ice # returns 'icu4c'
brew install icu4c
~~~

Use PECL to install intl:

~~~ {.bash}
sudo pecl update-channels
sudo pecl install intl
~~~

When prompted, give it the path to the ICU library,
which will be something like `/usr/local/Cellar/icu4c/4.8.1.1`.

Add the line:

    extension=intl.so

to php.ini, and we're done.

Installing MySQL
================

I used the [Homebrew](http://brew.sh) package manager
to install MySQL.

I can launch SQL with:

~~~ {.bash}
mysql.server start
~~~

If I want to launch mysql automatically at startup,
I can use the following command to add a file that `launchd` will see:

~~~ {.bash}
ln -s /usr/local/opt/mysql/homebrew.mxcl.mysql.plist ~/Library/LaunchAgents
~~~

Here are the contents of the `.plist` file:

~~~ {.xml}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>KeepAlive</key>
  <true/>
  <key>Label</key>
  <string>homebrew.mxcl.mysql</string>
  <key>ProgramArguments</key>
  <array>
    <string>/usr/local/opt/mysql/bin/mysqld_safe</string>
    <string>--bind-address=127.0.0.1</string>
  </array>
  <key>RunAtLoad</key>
  <true/>
  <key>WorkingDirectory</key>
  <string>/usr/local/var</string>
</dict>
</plist>
~~~

I can create a similar plist file to launch apache.

Next, I have to tell php how to connect to mysql,
because php looks in the wrong place.

~~~ {.php}
cd /var
mkdir mysql
cd mysql
ln -s /tmp/mysql.sock .
~~~

Finally, I should use the command `mysql_secure_installation`
to fix some of the commonest security holes.

Database administration
=======================

Basic setup
-----------

Set up the appropriate database and user with:

~~~ {.bash}
mysql -u root # add a -p switch if root has a password
mysql> CREATE DATABASE moodle DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,CREATE TEMPORARY TABLES,DROP,INDEX,ALTER
    -> ON moodle.* TO moodleuser@localhost IDENTIFIED BY '';
mysql> quit;
~~~

Here, the `TO moodleuser@localhost IDENTIFIED BY ''` creates a user account with an empty password.

Sequel Pro
----------

There's a free Mac application called Sequel Pro
that serves as a nice UI for administering a MySQL database.
Unfortunately, the download link lead to a 404 page,
but I found an alternative source via the blog,
with a modicum of URL hacking: <http://sequel-pro.googlecode.com/files/sequel-pro-1.0.2.dmg>.

`mysqladmin`
------------

For example, here's how to set the root password:

~~~ {.bash}
mysqladmin -u root password 'new_password_here'
~~~

Installing phpAdmin
-------------------

Download and unpack the files into a web directory.
(The directory was called `phpMyAdmin-4.0.4.1-english`,
which is a bit of a mouthful, so I changed it to `phpMyAdmin`.)

Create a sub-directory `phpMyAdmin/config` and set its permissions:

~~~ {.bash}
chmod o+wr config
~~~

Now visit `phpMyAdmin/setup` with your browser, and enter information about your database.

Save.

A file should be created in the config directory.

~~ {.bash}
mv config/config.inc.php .
chmod o-rw config.inc.php
rm -rf config
~~

And now you can log in at phpMyAdmin directory.

For security purposes, I should delete the `phpAdmin/setup` directory.

Creating Virtual Hosts
======================

Not got this far yet....

Uncomment the line:

    Include /private/etc/apache2/extra/httpd-vhosts.conf

in

    /etc/apache2/httpd.conf

Here's an example entry in `/private/etc/apache2/extra/httpd-vhosts.conf`:

~~~ {.xml}
<VirtualHost *:80>
  DocumentRoot "/Library/WebServer/Documents"
</VirtualHost>

<VirtualHost *:80>
  DocumentRoot "/Users/Jason/Documents/workspace/dev"
  ServerName jason.local
  ErrorLog "/private/var/log/apache2/jason.local-error_log"
  CustomLog "/private/var/log/apache2/jason.local-access_log" common

  <Directory "Users/jason/Documents/workspace/dev">
    AllowOverride All
    Order allow,deny
    Allow from all
  </Directory>
</VirtualHost>
~~~

We also have to add the line `127.0.0.1	jason.local`
to `/etc/hosts` and flush the Directory Service cache
with `dscacheutil -flushcache`.